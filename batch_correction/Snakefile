
METRICS=["ARI", "ASW", "LISI_40"]
SOFTWARES=["Raw", "Raw-pp", "Seurat3", "Harmony", "LIGER", "SIMBA"]
SOFTWARES_run_bc = ["Raw", "Raw-pp", "Seurat3", "Harmony", "LIGER"]
SOFTWARES_Euc = ["Raw", "Raw-pp", "Seurat3", "Harmony", "LIGER", "SIMBA"]
SOFTWARES_cos = []
DATASETS=["murine-atlas", "pancreas"]
SIMBA_SUFFIXES=[""]
d = 20

wildcard_constraints:
    sim="euclidean|cosine",
    emb="embedding|pca"


rule convert_h5ad:
    input:
        "SIMBA_h5ad_paths_D20.txt"
    output:
        expand("SIMBA{suffix}/output/{dataset}_SIMBA{suffix}_embedding_D{d}.txt", dataset=DATASETS, suffix=SIMBA_SUFFIXES, d = d),
        expand("SIMBA{suffix}/output/{dataset}_SIMBA{suffix}_umap_D{d}.txt", dataset=DATASETS, suffix=SIMBA_SUFFIXES, d = d)
    shell:
        "while IFS= read -r LINE;do python convert_h5.py $LINE; done < {input}"


rule correct_batch:
    input:
        "data/{dataset}/{dataset}_expr.txt.gz",
        "data/{dataset}/{dataset}_metadata.txt.gz",
    params:
        output_prefix="{dataset}",
        output_dir="{software}/output/",
        d=d
    output:
        "{software, (?!SIMBA)([-\w])*}/output/{dataset}_{software}_embedding_D{d}.txt"
        #"{software}/output/{dataset}_{software}_embedding.txt"
    shell:
        "Rscript {wildcards.software}/run_{wildcards.software}.R {input} {params.output_prefix} {params.output_dir} {params.d}| tee '{params.output_dir}/{wildcards.dataset}_D{params.d}.log'"

    
rule run_batch_correction:
    input:
         expand("{software}/output/{dataset}_{software}_embedding_D{{d}}.txt", software=SOFTWARES_run_bc, dataset = DATASETS)

#nPC_ft=lambda wildcards: 50 if wildcards.software == "SIMBA" else 20
#nPC_ft = 20

rule evaluate_ARI:
    input:
        "{software}/output/{dataset}_{software}_{emb}_D{d}.txt"
    output:
        "metrics/{dataset}/{software}_ARI_{emb}_{sim}.txt"
    params:
        output_dir="metrics/{dataset}/",
    shell:
        "Rscript metrics/run_ARISampled.R {wildcards.software} {input} '{params.output_dir}' {wildcards.emb} {wildcards.sim}"

rule evaluate_ASW:
    input:
        "{software}/output/{dataset}_{software}_{emb}_D{d}.txt"
    output:
        "metrics/{dataset}/{software}_ASW_{emb}_{sim}.txt"
    params:
        output_dir="metrics/{dataset}/",
    shell:
        "python metrics/run_ASW.py {wildcards.software} {input} {params.output_dir} {wildcards.emb} {wildcards.sim}"

rule evaluate_LISI:
    input:
        "{software}/output/{dataset}_{software}_{emb}_D{d}.txt"
    output:
        "metrics/{dataset}/{software}_LISI_{plx}_{emb}_{sim}.txt" 
    params:
        output_dir="metrics/{dataset}/",
    shell: 
        "Rscript metrics/run_LISI.R {input} {params.output_dir} {wildcards.emb} {wildcards.dataset} {wildcards.software} {wildcards.plx} {wildcards.sim}"

rule evaluate_kBET:
    input:
        "{software}/output/{dataset}_{software}_{emb}_D{d}.txt"
    output:
        "metrics/{dataset}/{software}_kBET_{emb}_{sim}.txt"
    params: 
        output_dir="metrics/{dataset}/",
    shell:
       "Rscript metrics/run_kBET.R {input} {params.output_dir} {wildcards.emb} {wildcards.dataset} {wildcards.software} {wildcards.plx} {wildcards.sim}"

rule calculate_metrics_ma:
    input:
        expand("metrics/murine-atlas/{software}_{metric}_embedding_euclidean.txt", metric=METRICS, software = SOFTWARES)


rule calculate_metrics_pa:
    input:
        expand("metrics/pancreas/{software}_{metric}_embedding_euclidean.txt", metric=METRICS, software = SOFTWARES)

rule collect_metrics_for_method:
    input:
        expand("metrics/{{dataset}}/{{software}}_{metric}_{{emb}}_{{sim}}.txt", metric=METRICS)
    output:
        "metrics/{dataset}/{software}_metrics_collected_{emb}_{sim}.txt"
    params:
        output_dir="metrics/{dataset}/"
    shell:
        "Rscript metrics/collect_metrics_for_method.R {wildcards.software} {input} {params.output_dir} {wildcards.emb} {wildcards.sim}"

rule collect_metrics:
    input: 
        expand("metrics/{{dataset}}/{software}_metrics_collected_{{emb}}_euclidean.txt", software=SOFTWARES_Euc), 
        expand("metrics/{{dataset}}/{software}_metrics_collected_{{emb}}_cosine.txt", software=SOFTWARES_cos)
    output:
        "metrics/{dataset}/metrics_collected_{emb}.txt"
    params:
        output_dir="metrics/{dataset}/"
    shell:
        "Rscript metrics/collect_metrics_all.R {input} {params.output_dir} {wildcards.emb}"

rule create_pca:
    input:
        "{software}/output/{dataset}_{software}_embedding.txt"
    output:
        "{software}/output/{dataset}_{software}_pca.txt"
    shell:
        "Rscript run_pca_on_embedding.R {input} {output} 20"

rule create_umap:
    input:
        "{software, (?!SIMBA)([-\w])*}/output/{dataset}_{software}_embedding_D{d}.txt"
    output:
        "{software}/output/{dataset}_{software}_umap_D{d}.txt"
    shell:
        "Rscript run_umap_on_embedding.R {input} {output}"

rule plot_umap:
    input:
        "{software}/output/{dataset}_{software}_umap_D{d}.txt"
    output:
        "plots/{dataset}_{software}_umap_nolab_D{d}.pdf"
    shell:
        "mkdir -p plots/; Rscript plots/plot_umap.R {input} {output} {wildcards.dataset}"


rule plot_umap_legend:
    input:
        "{software}/output/{dataset}_{software}_umap_D{d}.txt"
    output:
        "plots/{dataset}_{software}_umap_wlab_D{d}.pdf"
    shell:
        "mkdir -p plots/; Rscript plots/plot_umap.R {input} {output} {wildcards.dataset} TRUE"


rule plot_all:
    input:
        expand("plots/{dataset}_{software}_umap_nolab_D{d}.pdf", software = SOFTWARES, dataset=DATASETS, d= d),
        expand("plots/{dataset}_SIMBA_umap_wlab_D{d}.pdf", dataset=DATASETS, d = d),
        expand("plots/{dataset}_metrics_embedding_D{d}.pdf", dataset=DATASETS, d = d)
        
        
rule plot_metrics:
    input:
        "metrics/{dataset}/metrics_collected_{emb}.txt"
    output:
        "plots/{dataset}_metrics_{emb}_D{d}.pdf"
    shell:
        "Rscript plots/plot_metrics.R {input} {output}"


class SafeDict(dict):
    def __missing__(self, key):
        return '{' + key + '}'

rule plot_metrics_all:
    input:
        expand("plots/{dataset}_metrics_embedding_D{d}.pdf".format_map(SafeDict(d=d)), dataset=DATASETS)
    params:
        d=d
